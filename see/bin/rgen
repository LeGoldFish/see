local config = { }
local _, err = pcall(function(...)
    local USAGE = "Usage: rgen <mainClass> <target> <classArchives>"

    local args = { ... }
    if #args < 3 then print(USAGE) end
    local mainClass = args[1]
    local target = "/" .. shell.resolve(args[2])

    local classArchives = { }
    for i = 3, #args do
        table.insert(classArchives, args[i])
    end

    local archivesBytes = { }
    for i = 1, #classArchives do
        local archiveHandle = fs.open(classArchives[i], "r")
        local archiveBytes = archiveHandle.readAll()
        archiveHandle.close()
        table.insert(archivesBytes, archiveBytes)
    end

    -- Insert $ in places to pass arguments.
    local code =
[[
local config = { }
local _, err = pcall(function(...)
    local CONFIG_FAIL = "Failed load /.see config file. Reinstall SEE or replace the file with correct info."
    local apiPath, rt
    local args = {...}
    local archivesBytes = $
    local mainClassName = '$'
    local classPaths = $

    local natives = { }
    for k, v in pairs(_G) do
        natives[k] = v
    end
    natives.shell = shell

    local fileHandle = fs.open("/.see", "r")
    if not fileHandle then
        print(CONFIG_FAIL)
        return
    end
    local configFunc, err = loadstring(fileHandle.readAll())

    if err then
        print(CONFIG_FAIL)
        return
    end

    setfenv(configFunc, config)
    configFunc()
    fileHandle.close()

    apiPath = fs.combine(config.install_dir, "apis/see")
    os.loadAPI(apiPath)
    rt = see.SeeRT.new(natives, config.install_dir)

    for i = 1, #classPaths do
        local classPath = classPaths[i]
        table.insert(rt.classPaths, classPath)
        rt.archives[classPath] = archivesBytes[i]
    end
    
    local MainClass = rt:loadClassFromAny(mainClassName)
    if not MainClass then error("Main class not found! ") end
    if not MainClass.main then error("Main method not found!") end
    rt:start(MainClass, unpack(args))
end, ...)

os.unloadAPI(fs.combine(config.install_dir, "apis/see"))

if err then
    error(err)
end
]]

    local archivesConverted = { }
    for i = 1, #archivesBytes do 
        local archiveBytes = archivesBytes[i]

        local escaped
        local archiveTable = { }
        local strSize = 0
        for i = 1, #archiveBytes do
            local b = archiveBytes:sub(i, i):byte()
            if b < 32 or b > 126 or b == 34 or b == 39 or b == 92 then
                escaped = true
                archiveTable[i] = "\\" .. b
            else
                if escaped then
                    escaped = false
                    if b > 47 and b < 57 then
                        archiveTable[i] ="'..'" .. string.char(b);
                    else
                        archiveTable[i] = string.char(b)
                    end
                else
                    archiveTable[i] = string.char(b)
                end
            end

            if strSize >= 500 then
                archiveTable[i] = archiveTable[i] .. "'..'"
                strSize = 0
            else
                strSize = strSize + 1
            end
        end

        local archiveConverted = table.concat(archiveTable)
        table.insert(archivesConverted, archiveConverted)
    end

    local add = "{"
    for i = 1, #archivesConverted do
        local archiveConverted = archivesConverted[i]

        add = add .. "'" .. archiveConverted .. "'"

        if i ~= #archivesConverted then
            add = add .. ','
        end
    end
    add = add .. '}'

    local f = code:find("$", 1, true)
    code = code:sub(1, f - 1) .. add .. code:sub(f + 1)
    f = code:find("$", f + #add, true)
    code = code:sub(1, f - 1) .. mainClass .. code:sub(f + 1)

    add = "{"
    for i = 1, #classArchives do
        local classArchive = classArchives[i]

        add = add .. "'" .. classArchive .. "'"

        if i ~= #classArchives then
            add = add .. ','
        end
    end
    add = add .. '}'

    f = code:find("$", f + #add, true)
    code = code:sub(1, f - 1) .. add .. code:sub(f + 1)

    local out = fs.open(target, "w")
    out.write(code)
    out.close()
end, ...)

if err then
    error(err)
end