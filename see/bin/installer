local REPO_URL = "https://raw.github.com/Yevano/see/master/see/"
local SUPPORTS_COLOR = term.isColor()

local args = { ... }

local function getGithubContents(sPath)
    local type, path, name, checkPath = {}, {}, {}, {}
    local response = http.get("https://api.github.com/repos/yevano/see/contents/" .. sPath)
    if response then
        response = response.readAll()
        if response ~= nil then
            for str in response:gmatch('"type":"(%w+)"') do table.insert(type, str) end
            for str in response:gmatch('"path":"([^\"]+)"') do table.insert(path, str) end
            for str in response:gmatch('"name":"([^\"]+)"') do table.insert(name, str) end
        end
    end
    return type, path, name
end

local function fail(err)
    if SUPPORTS_COLOR then
        term.setTextColor(colors.red)
    end

    print(err)

    if SUPPORTS_COLOR then
        term.setTextColor(colors.white)
    end

    while true do
        write("Retry installation? (y/n): ")
        local response = read()
        if string.lower(response):gsub("%s", "") == "y" then
            print("")
            return true
        elseif string.lower(response):gsub("%s", "") == "n" then
            return false
        end
        print("Invalid input.")
    end
end

local fileList = {dirs={}, files={}}

function loadDownloads(path)
    local type, fPath, name = getGithubContents(path)
    for i, data in pairs(type) do
        if data == "file" then
            local resp = http.get("https://raw.github.com/yevano/see/master/" .. fPath[i])
            if resp == nil then
                fPath[i] = fPath[i] .. "/" .. name[i]
            end

            local path = fPath[i]
            if gPath ~= nil then path = gPath .. "/yevano/" .. fPath[i] end
            if not fileList.files[path] then
                fileList.files[path] = {"https://raw.github.com/yevano/see/master/" .. fPath[i], name[i]}
            end
        end
    end

    for i, data in pairs(type) do
        if data == "dir" then
            local path = fPath[i]
            if gPath ~= nil then path = gPath .. "/yevano/" .. fPath[i] and string.sub(path, 1, math.min(#path, 8)) ~= "see/test" end
            if not fileList.dirs[path] then
                fileList.dirs[path] = {"https://raw.github.com/yevano/see/master/" .. fPath[i], name[i]}
                loadDownloads(fPath[i])
            end
        end
    end
end

loadDownloads("see")

--[[
while true do
    while true do
        local downloaded = 0

        local installPath
        if #args == 1 then
            installPath = args[1]
        else
            write("Choose an install path: ")
            installPath = "/" .. shell.resolve(read())
        end

        local configHandle = fs.open("/.see", "w")
        configHandle.write('install_dir = "' .. installPath .. '"')
        configHandle.close()

        local suc, err = pcall(fs.makeDir, installPath)
        if not suc then
            if fail("Could not create installation directory.") then break end
            return
        end

        print("Setting up directory structure.")

        for i = 1, #MAKE_PATHS do
            fs.makeDir(fs.combine(installPath, MAKE_PATHS[i]))
        end

        print("Downloading SEE files from repository.")

        local url, httpFail
        for i = 1, #DL_PATHS do
            url = REPO_URL .. DL_PATHS[i]
            print("Downloading " .. DL_PATHS[i])
            local readHandle = http.get(url)
            if readHandle.getResponseCode() ~= 200 then
                httpFail = true
                break
            end

            local _, relativePathStart = url:find(REPO_URL, 1, true)
            local writePath = fs.combine(installPath, url:sub(relativePathStart + 1))

            local writeHandle = fs.open(writePath, "w")
            writeHandle.write(readHandle.readAll())

            readHandle.close()
            writeHandle.close()
        end

        if httpFail then
            if fail("File download failed for url " .. url .. ".") then
                break
            end
        else
            print("SEE was installed successfully.")
        end

        return
    end
end
]]--