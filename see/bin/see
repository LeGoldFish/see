local apiPath
local config = { }
local _, err = pcall(function(...)
    local function copy(t)
        local r = { }
        for k, v in pairs(t) do
            r[k] = v
        end
        return r
    end

    local natives = copy(_G)
    natives.shell = shell
    local rt
    local classPath

    local function runFromPath(classPath, mainClassName, args)
        local MainClass = rt:loadClassFromAny(mainClassName)
        if not MainClass then error("Main class not found! ") end
        rt:start(MainClass, unpack(args))
    end

    local function runFromArchive(classPath, mainClassName, args)
        local fileHandle = fs.open(classPath, "r")
        rt.archives[classPath] = fileHandle.readAll()
        fileHandle.close()
        local MainClass = rt:loadClassFromAny(mainClassName)
        if not MainClass then error("Main class not found! ") end
        rt:start(MainClass, unpack(args))
    end

    local function getSubDirectories(path)
        local paths = { }
        for _, name in pairs(fs.list(path)) do
            local it = fs.combine(path, name)
            table.insert(paths, it)
            if fs.isDir(it) then
                local sub = getSubDirectories(it)
                for i = 1, #sub do
                    table.insert(paths, sub[i])
                end
            end
        end
        return paths
    end

    local function packArchive(src, dest)
        local readHandle
        local writeHandle = fs.open(dest, "w")
        local paths = getSubDirectories(src)

        for i = 1, #paths do
            local path = paths[i]
            if fs.isDir(path) then
                writeHandle.write("D" .. path:sub(#src + 2) .. "\0")
            else
                readHandle = fs.open(path, "r")
                writeHandle.write("F" .. path:sub(#src + 2) .. "\0" .. readHandle.readAll() .. "\0")
                readHandle.close()
            end
        end

        writeHandle.write("\0")
        writeHandle.close()
    end

    local function readZeroTerminated(readHandle)
        local c = readHandle.read()
        local path = ""
        repeat
            path = path .. string.char(c)
            c = readHandle.read()
        until c == 0
        return path
    end

    local function unpackArchive(src, dest)
        fs.makeDir(dest)
        local readHandle = fs.open(src, "rb")
        local writeHandle

        while true do
            local b = readHandle.read()
            if b == 0 then break end

            local path = fs.combine(dest, readZeroTerminated(readHandle))
            if string.char(b) == "D" then
                -- Directory entry.
                fs.makeDir(path)
            elseif string.char(b) == "F" then
                -- File entry.
                local name = fs.getName(path)
                local parent = path:sub(1, -#name - 1)

                fs.makeDir(parent)
                writeHandle = fs.open(path, "w")
                writeHandle.write(readZeroTerminated(readHandle))
                writeHandle.close()
            else
                error("Could not read file. Invalid archive entry byte " .. string.format("%x", b))
            end
        end

        readHandle.close()
    end

    local USAGE = "Usage: see <-r <classPath> <mainClass> <args>>|<-p <src> <dest>>|<-u <src> <dest>>|<-help>"
    local CONFIG_FAIL = "Failed load /.see config file. Reinstall SEE or replace the file with correct info."
    local args = {...}
    local op = args[1]

    if not op then
        print(USAGE)
        return
    end

    if op == "-r" then
        if #args < 3 then
            print(USAGE)
            return
        end

        --Run option.
        local fileHandle = fs.open("/.see", "r")
        if not fileHandle then
            print(CONFIG_FAIL)
            return
        end
        local configFunc, err = loadstring(fileHandle.readAll())

        if err then
            print(CONFIG_FAIL)
            return
        end

        setfenv(configFunc, config)
        configFunc()
        fileHandle.close()

        apiPath = fs.combine(config.install_dir, "apis/see")
        os.loadAPI(apiPath)
        rt = see.SeeRT.new(natives, config.install_dir)
        classPath = shell.resolve(args[2])
        if not fs.exists(classPath) then
            print("No such archive or folder \"" .. classPath .. "\".")
            return
        end
        table.insert(rt.classPaths, classPath)
        
        local mainClassName = args[3]
        local programArgs = { }
        for i = 4, #args do
            table.insert(programArgs, args[i])
        end

        if fs.isDir(classPath) then
            runFromPath(classPath, mainClassName, programArgs)
        else
            runFromArchive(classPath, mainClassName, programArgs)
        end
    elseif op == "-p" then
        -- Pack option.
        if #args < 3 then
            print(USAGE)
            return
        end
        packArchive(shell.resolve(args[2]), shell.resolve(args[3]))
    elseif op == "-u" then
        -- Unpack option.
        if #args < 3 then
            print(USAGE)
            return
        end
        unpackArchive(shell.resolve(args[2]), shell.resolve(args[3]))
    elseif op == "-help" then
        -- Help option.
        print(USAGE)
    else
        print(USAGE)
    end
end, ...)

os.unloadAPI(apiPath)

if err then
    error(err)
end